import express from 'express';
import mqtt from 'mqtt';
import cors from 'cors';
import { MongoClient } from 'mongodb';

const app = express();
const PORT = process.env.PORT || 3000;

// ============================================================================
// –§–ê–ó–ê 1: –ë–ê–ó–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================

// 1.1 –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const client = new MongoClient(process.env.MONGODB_URI);
const dbName = 'iotHubDB';

async function connectToMongoDB() {
    try {
        await client.connect();
        console.log('üóÑÔ∏è MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(connectToMongoDB, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
connectToMongoDB();

// 1.2 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const DEVICE_TYPES = {
    climate: {
        name: "–ö–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å",
        icon: "üå°Ô∏è",
        mqttTopics: {
            data: "devices/{device_id}/data",
            threshold: "devices/{device_id}/threshold"
        },
        defaultSettings: { threshold: 25 },
        validation: {
            threshold: { min: 0, max: 40, type: "number" }
        },
        uiPath: "/devices/climate/"
    },
    smartdim: {
        name: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º",
        icon: "üí°",
        mqttTopics: {
            data: "devices/{device_id}/data",
            brightness: "devices/{device_id}/brightness",
            schedule: "devices/{device_id}/schedule"
        },
        defaultSettings: { brightness: 50, schedule: null },
        validation: {
            brightness: { min: 0, max: 100, type: "number" }
        },
        uiPath: "/devices/smartdim/"
    }
    // –ù–û–í–´–ï –¢–ò–ü–´ –£–°–¢–†–û–ô–°–¢–í –î–û–ë–ê–í–õ–Ø–Æ–¢–°–Ø –ó–î–ï–°–¨
};

// 1.3 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const VALID_DEVICES = {
    // –ö–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å
    climate01: { type: 'climate', defaultName: 'Climate Sensor #1' },
    climate02: { type: 'climate', defaultName: 'Climate Sensor #2' },
    climate03: { type: 'climate', defaultName: 'Climate Sensor #3' },

    // –î–∏–º–º–µ—Ä—ã (–ø—Ä–∏–º–µ—Ä –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    smartdim01: { type: 'smartdim', defaultName: 'Smart Dimmer #1' },
    smartdim02: { type: 'smartdim', defaultName: 'Smart Dimmer #2' },

    // –ù–û–í–´–ï –£–°–¢–†–û–ô–°–¢–í–ê –î–û–ë–ê–í–õ–Ø–Æ–¢–°–Ø –ó–î–ï–°–¨
};

// ============================================================================
// –§–ê–ó–ê 2: –°–ï–†–í–ò–°–´ –ò –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò
// ============================================================================

// 2.1 –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
class UserService {
    static async getUser(telegramId) {
        try {
            await client.connect();
            const db = client.db(dbName);
            const numericId = typeof telegramId === 'string' ? parseInt(telegramId, 10) : telegramId;
            const user = await db.collection('users').findOne({ _id: numericId });
            return user;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            return null;
        }
    }

    static async addDevice(telegramId, deviceId, userInfo) {
        try {
            await client.connect();
            const db = client.db(dbName);

            const deviceConfig = VALID_DEVICES[deviceId];
            const deviceType = DEVICE_TYPES[deviceConfig.type];

            const newDevice = {
                device_id: deviceId,
                device_type: deviceConfig.type,
                custom_name: deviceConfig.defaultName,
                settings: deviceType.defaultSettings,
                registered_at: new Date().toISOString()
            };

            await db.collection('users').updateOne(
                { _id: telegramId },
                {
                    $set: {
                        username: userInfo.username,
                        first_name: userInfo.first_name,
                        last_name: userInfo.last_name,
                        updated_at: new Date().toISOString()
                    },
                    $push: { devices: newDevice }
                },
                { upsert: true }
            );

            return { success: true, device: newDevice };
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
            return { success: false, error: err.message };
        }
    }

    static async removeDevice(telegramId, deviceId) {
        try {
            await client.connect();
            const db = client.db(dbName);

            await db.collection('users').updateOne(
                { _id: telegramId },
                { $pull: { devices: { device_id: deviceId } } }
            );

            return { success: true };
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
            return { success: false, error: err.message };
        }
    }

    static async updateDeviceName(telegramId, deviceId, newName) {
        try {
            await client.connect();
            const db = client.db(dbName);

            await db.collection('users').updateOne(
                { _id: telegramId, "devices.device_id": deviceId },
                { $set: { "devices.$.custom_name": newName } }
            );

            return { success: true };
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
            return { success: false, error: err.message };
        }
    }

    static async updateDeviceSettings(telegramId, deviceId, settings) {
        try {
            await client.connect();
            const db = client.db(dbName);

            await db.collection('users').updateOne(
                { _id: telegramId, "devices.device_id": deviceId },
                { $set: { "devices.$.settings": settings } }
            );

            return { success: true };
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
            return { success: false, error: err.message };
        }
    }

    static groupDevicesByType(devices) {
        const grouped = {};

        devices.forEach(device => {
            if (!grouped[device.device_type]) {
                grouped[device.device_type] = {
                    type_info: DEVICE_TYPES[device.device_type],
                    devices: []
                };
            }
            grouped[device.device_type].devices.push(device);
        });

        return grouped;
    }
}

// 2.2 –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
class DeviceService {
    static getDeviceType(deviceId) {
        const deviceConfig = VALID_DEVICES[deviceId];
        return deviceConfig ? deviceConfig.type : null;
    }

    static isValidDevice(deviceId) {
        return VALID_DEVICES.hasOwnProperty(deviceId);
    }

    static validateSettings(deviceType, settings) {
        const typeConfig = DEVICE_TYPES[deviceType];
        if (!typeConfig) return { valid: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' };

        const validation = typeConfig.validation;
        for (const [key, value] of Object.entries(settings)) {
            if (validation[key]) {
                const rule = validation[key];
                if (rule.type === 'number') {
                    if (value < rule.min || value > rule.max) {
                        return { valid: false, error: `${key} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É ${rule.min} –∏ ${rule.max}` };
                    }
                }
            }
        }

        return { valid: true };
    }

    static async checkDeviceOwnership(telegramId, deviceId) {
        const user = await UserService.getUser(telegramId);
        if (!user || !user.devices) return false;

        return user.devices.some(device => device.device_id === deviceId);
    }
}

// ============================================================================
// –§–ê–ó–ê 3: MQTT –°–ò–°–¢–ï–ú–ê
// ============================================================================

// 3.1 MQTT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const mqttOptions = {
    host: process.env.MQTT_SERVER,
    port: Number(process.env.MQTT_PORT),
    username: process.env.MQTT_USER,
    password: process.env.MQTT_PASSWORD,
    protocol: 'mqtt'
};

// 3.2 –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MQTT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
class MQTTDeviceManager {
    constructor() {
        this.client = mqtt.connect(mqttOptions);
        this.latestData = new Map(); // device_id -> latest data
        this.deviceHandlers = new Map();
        this.setupConnection();
        this.registerDeviceTypes();
    }

    setupConnection() {
        this.client.on('connect', () => {
            console.log('üîå MQTT connected');
            this.subscribeToAllDevices();
        });

        this.client.on('message', (topic, message) => {
            this.handleMessage(topic, message);
        });
    }

    registerDeviceTypes() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        Object.keys(DEVICE_TYPES).forEach(deviceType => {
            this.deviceHandlers.set(deviceType, new DeviceTypeHandler(deviceType));
        });
    }

    subscribeToAllDevices() {
        Object.keys(VALID_DEVICES).forEach(deviceId => {
            const deviceType = VALID_DEVICES[deviceId].type;
            const typeConfig = DEVICE_TYPES[deviceType];

            Object.values(typeConfig.mqttTopics).forEach(topicTemplate => {
                const topic = topicTemplate.replace('{device_id}', deviceId);
                this.client.subscribe(topic);
            });
        });
    }

    handleMessage(topic, message) {
        const deviceId = this.extractDeviceId(topic);
        if (!deviceId) return;

        try {
            const payload = JSON.parse(message.toString());
            this.latestData.set(deviceId, {
                ...payload,
                timestamp: new Date(),
                device_id: deviceId
            });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MQTT:', e);
        }
    }

    extractDeviceId(topic) {
        const match = topic.match(/devices\/([^\/]+)\//);
        return match ? match[1] : null;
    }

    getLatestData(deviceId) {
        return this.latestData.get(deviceId) || {};
    }

    publishCommand(deviceId, command, data) {
        const deviceType = DeviceService.getDeviceType(deviceId);
        if (!deviceType) return false;

        const typeConfig = DEVICE_TYPES[deviceType];
        const topicTemplate = typeConfig.mqttTopics[command];

        if (!topicTemplate) return false;

        const topic = topicTemplate.replace('{device_id}', deviceId);
        this.client.publish(topic, String(data));
        return true;
    }
}

// 3.3 Handler –¥–ª—è —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
class DeviceTypeHandler {
    constructor(deviceType) {
        this.deviceType = deviceType;
        this.config = DEVICE_TYPES[deviceType];
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    // –ë—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º
}

// ============================================================================
// –§–ê–ó–ê 4: MIDDLEWARE –ò –í–ê–õ–ò–î–ê–¶–ò–Ø
// ============================================================================

// 4.1 Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const requireAuth = (req, res, next) => {
    const telegramId = req.body?.telegram_id || req.query?.telegram_id;

    // console.log('üì° [AUTH] –ü–æ–ª—É—á–µ–Ω telegram_id:', telegramId);
    // console.log('üì¶ req.body =', req.body);
    // console.log('üì¶ req.query =', req.query);

    if (!telegramId) {
        return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    req.telegramId = telegramId;
    next();
};


// 4.2 Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
// 4.2 Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const validateDevice = (req, res, next) => {
    // –ò—â–µ–º device_id –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    const device_id = req.params.device_id || req.body?.device_id || req.query?.device_id;

    // console.log('üì° [VALIDATE_DEVICE] –ü–æ–∏—Å–∫ device_id:', {
    //     method: req.method,
    //     url: req.url,
    //     params: req.params,
    //     body: req.body,
    //     query: req.query,
    //     found_device_id: device_id
    // });

    if (!device_id) {
        console.log('‚ùå [VALIDATE_DEVICE] device_id –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω device_id' });
    }

    if (!DeviceService.isValidDevice(device_id)) {
        console.log('‚ùå [VALIDATE_DEVICE] –ù–µ–≤–µ—Ä–Ω—ã–π device_id:', device_id);
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }

    // console.log('‚úÖ [VALIDATE_DEVICE] device_id –≤–∞–ª–∏–¥–µ–Ω:', device_id);
    req.deviceId = device_id;
    req.deviceType = DeviceService.getDeviceType(device_id);
    next();
};

// 4.3 Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const requireDeviceOwnership = async (req, res, next) => {
    const hasAccess = await DeviceService.checkDeviceOwnership(req.telegramId, req.deviceId);
    if (!hasAccess) {
        return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É' });
    }
    next();
};

// ============================================================================
// –§–ê–ó–ê 5: API ENDPOINTS
// ============================================================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MQTT –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const mqttManager = new MQTTDeviceManager();

// Middleware
app.use(cors());
app.use(express.json());

// 5.1 –°–∏—Å—Ç–µ–º–Ω—ã–µ endpoints
// app.get('/ping', (req, res) => {
//     console.log('üîÑ Ping received at', new Date());
//     res.json({ status: 'alive', timestamp: new Date() });
// });

app.get('/api/devices/types', (req, res) => {
    res.json(DEVICE_TYPES);
});

// 5.2 –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
app.post('/api/auth/register-device', requireAuth, validateDevice, async (req, res) => {
    const { device_id, username, first_name, last_name } = req.body;
    const telegramId = req.telegramId;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        const existingUsers = await client.db(dbName).collection('users')
            .find({ "devices.device_id": device_id }).toArray();

        const occupiedBy = existingUsers.find(user => user._id !== telegramId);
        if (occupiedBy) {
            return res.status(400).json({ error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const user = await UserService.getUser(telegramId);
        if (user && user.devices && user.devices.some(d => d.device_id === device_id)) {
            return res.status(400).json({ error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ' });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        const result = await UserService.addDevice(telegramId, device_id, {
            username, first_name, last_name
        });

        if (result.success) {
            console.log(`‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
            res.json({
                success: true,
                message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                device: result.device
            });
        } else {
            res.status(500).json({ error: result.error });
        }

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/api/auth/check', requireAuth, async (req, res) => {
    try {
        const user = await UserService.getUser(req.telegramId);

        if (user && user.devices && user.devices.length > 0) {
            const groupedDevices = UserService.groupDevicesByType(user.devices);
            // console.log("Grouped Devices = ", JSON.stringify(groupedDevices, null, 2));
            res.json({
                authorized: true,
                devices: groupedDevices,
                total_devices: user.devices.length
            });
        } else {
            res.json({ authorized: false });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 5.3 –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
app.get('/api/devices/:device_id/data', requireAuth, validateDevice, requireDeviceOwnership, (req, res) => {
    console.log('–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', {
        deviceId: req.deviceId,
        telegramId: req.telegramId,
        userAgent: req.headers['user-agent'],
        ip: req.ip
    });

    const data = mqttManager.getLatestData(req.deviceId);
    res.json(data);
});

app.put('/api/devices/:device_id/settings', requireAuth, validateDevice, requireDeviceOwnership, async (req, res) => {
    const { settings } = req.body;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const validation = DeviceService.validateSettings(req.deviceType, settings);
    if (!validation.valid) {
        return res.status(400).json({ error: validation.error });
    }

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        const result = await UserService.updateDeviceSettings(req.telegramId, req.deviceId, settings);

        if (result.success) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MQTT
            Object.entries(settings).forEach(([key, value]) => {
                mqttManager.publishCommand(req.deviceId, key, value);
            });

            res.json({ success: true, message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
        } else {
            res.status(500).json({ error: result.error });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.put('/api/devices/:device_id/name', requireAuth, validateDevice, requireDeviceOwnership, async (req, res) => {
    const { name } = req.body;

    if (!name || name.trim().length === 0) {
        return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }

    try {
        const result = await UserService.updateDeviceName(req.telegramId, req.deviceId, name.trim());

        if (result.success) {
            res.json({ success: true, message: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ' });
        } else {
            res.status(500).json({ error: result.error });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/auth/unregister-device', requireAuth, validateDevice, requireDeviceOwnership, async (req, res) => {
    try {
        const result = await UserService.removeDevice(req.telegramId, req.deviceId);

        if (result.success) {
            console.log(`üîì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${req.deviceId} –æ—Ç–≤—è–∑–∞–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.telegramId}`);
            res.json({ success: true, message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–≤—è–∑–∞–Ω–æ' });
        } else {
            res.status(500).json({ error: result.error });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ============================================================================
// –§–ê–ó–ê 6: LEGACY ENDPOINTS (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
// ============================================================================

// 6.1 –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö endpoints (–≤—Ä–µ–º–µ–Ω–Ω–æ)
app.post('/register', requireAuth, validateDevice, async (req, res) => {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint /register');
    const { device_id, username, first_name, last_name } = req.body;
    const telegramId = req.telegramId;

    try {
        const existingUsers = await client.db(dbName).collection('users')
            .find({ "devices.device_id": device_id }).toArray();

        const occupiedBy = existingUsers.find(user => user._id !== telegramId);
        if (occupiedBy) {
            return res.status(400).json({ error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' });
        }

        const user = await UserService.getUser(telegramId);
        if (user && user.devices && user.devices.some(d => d.device_id === device_id)) {
            return res.status(400).json({ error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ' });
        }

        const result = await UserService.addDevice(telegramId, device_id, {
            username, first_name, last_name
        });

        if (result.success) {
            console.log(`‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
            res.json({
                success: true,
                message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                device: result.device
            });
        } else {
            res.status(500).json({ error: result.error });
        }

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/check-auth', requireAuth, async (req, res) => {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint /check-auth');
    try {
        const user = await UserService.getUser(req.telegramId);

        if (user && user.devices && user.devices.length > 0) {
            const groupedDevices = UserService.groupDevicesByType(user.devices);
            console.log("Grouped Devices = ", JSON.stringify(groupedDevices, null, 2));
            res.json({
                authorized: true,
                devices: groupedDevices,
                total_devices: user.devices.length
            });
        } else {
            res.json({ authorized: false });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 6.2 –í—Ä–µ–º–µ–Ω–Ω—ã–µ endpoints –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—Ç–∞—Ä—ã–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.get('/get-latest', (req, res) => {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint /get-latest');
    const { device_id } = req.query;
    if (!device_id) {
        return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω device_id' });
    }
    const data = mqttManager.getLatestData(device_id);
    res.json(data);
});

app.post('/set-threshold', (req, res) => {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint /set-threshold');
    const { threshold, device_id } = req.body;

    if (!device_id || !VALID_DEVICES[device_id]) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π device_id' });
    }

    // –î–û–ë–ê–í–ò–¢–¨ –í–ê–õ–ò–î–ê–¶–ò–Æ:
    if (threshold === undefined || threshold === null || isNaN(threshold)) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞' });
    }

    const numericThreshold = Number(threshold);
    if (numericThreshold < 0 || numericThreshold > 40) {
        return res.status(400).json({ error: '–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 40' });
    }

    const success = mqttManager.publishCommand(device_id, 'threshold', numericThreshold);

    if (success) {
        console.log(`üå°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ ${numericThreshold}¬∞C –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${device_id}`);
        res.json({ ok: true });
    } else {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã' });
    }
});

// ============================================================================
// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ============================================================================

app.listen(PORT, () => {
    console.log(`üöÄ IoT Hub Server running on port ${PORT}`);
    console.log(`üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${Object.keys(DEVICE_TYPES).join(', ')}`);
    console.log(`üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${Object.keys(VALID_DEVICES).length}`);
});

// ============================================================================
// –ü–õ–ê–ù–´ –†–ê–ó–í–ò–¢–ò–Ø
// ============================================================================

/*
–°–õ–ï–î–£–Æ–©–ò–ï –≠–¢–ê–ü–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò:

1. –§–ê–ó–ê 7: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   - Telegram Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   - –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π

2. –§–ê–ó–ê 8: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
   - –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã
   - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

3. –§–ê–ó–ê 9: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
   - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
   - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (if-then –ø—Ä–∞–≤–∏–ª–∞)
   - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

4. –§–ê–ó–ê 10: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
   - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
   - –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π
   - –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

5. –§–ê–ó–ê 11: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
   - –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
   - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (Redis)
   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
*/